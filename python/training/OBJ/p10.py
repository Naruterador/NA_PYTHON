#coding=utf-8
'''
面向对象三大特性

封装 根据 职责 将 属性 和 方法 封装 到一个抽象的 类 中
继承 实现代码的重用，相同的代码不需要重复的编写
多态 不同的对象调用相同的方法，产生不同的执行结果，增加代码的灵活度
----------------------------------------------------------
单继承
继承的概念、语法和特点
继承的概念：子类 拥有 父类 的所有 方法 和 属性


继承的语法
class 类名(父类名):

    pass

子类 继承自父类，可以直接 享受 父类中已经封装好的方法，不需要再次开发
子类 中应该根据 职责，封装 子类特有的 属性和方法
-----------------------------------------------------------

专业术语
Dog 类是 Animal 类的子类，Animal 类是 Dog 类的父类，Dog 类从 Animal 类继承
Dog 类是 Animal 类的派生类，Animal 类是 Dog 类的基类，Dog 类从 Animal 类派生
-----------------------------------------------------------------------

继承的传递性
C 类从 B 类继承，B 类又从 A 类继承
那么 C 类就具有 B 类和 A 类的所有属性和方法
子类 拥有 父类 以及 父类的父类 中封装的所有 属性 和 方法
-----------------------------------------------------------------------

方法的重写
子类 拥有 父类 的所有 方法 和 属性
子类 继承自 父类，可以直接 享受 父类中已经封装好的方法，不需要再次开发
应用场景

当 父类 的方法实现不能满足子类需求时，可以对方法进行 重写 (override)

重写 父类方法有两种情况：
1.覆盖 父类的方法
2.对父类方法进行 扩展
------------------------------------------------------------------------

覆盖父类的方法
如果在开发中，父类的方法实现和子类的方法实现，完全不同
就可以使用 覆盖 的方式，在子类中 重新编写 父类的方法实现
具体的实现方式，就相当于在 子类中 定义了一个 和父类同名的方法并且实现

重写之后，在运行时，只会调用 子类中重写的方法，而不再会调用 父类封装的方法
-------------------------------------------------------------------------

对父类方法进行 扩展
如果在开发中，子类的方法实现 中 包含 父类的方法实现
父类原本封装的方法实现 是 子类方法的一部分就可以使用 扩展 的方式
1.在子类中 重写 父类的方法
2.在需要的位置使用 super().父类方法 来调用父类方法的执行
3.代码其他的位置针对子类的需求，编写 子类特有的代码实现

关于 super
1.在 Python 中 super 是一个 特殊的类
2.super() 就是使用 super 类创建出来的对象
3.最常 使用的场景就是在 重写父类方法时，调用 在父类中封装的方法实现



调用父类方法的另外一种方式
在 Python 2.x 时，如果需要调用父类的方法，还可以使用以下方式：
父类名.方法(self)

这种方式，目前在 Python 3.x 还支持这种方式
这种方法 不推荐使用，因为一旦 父类发生变化，方法调用位置的 类名 同样需要修改
提示

在开发时，父类名 和 super() 两种方式不要混用
如果使用 当前子类名 调用方法，会形成递归调用，出现死循环
---------------------------------------------------------------------------

父类的 私有属性 和 私有方法
1.子类对象 不能 在自己的方法内部，直接 访问 父类的 私有属性 或 私有方法
2.子类对象 可以通过 父类 的 公有方法 间接 访问到 私有属性 或 私有方法
3.私有属性、方法 是对象的隐私，不对外公开，外界 以及 子类 都不能直接访问
4.私有属性、方法 通常用于做一些内部的事情
---------------------------------------------------------------------------
'''