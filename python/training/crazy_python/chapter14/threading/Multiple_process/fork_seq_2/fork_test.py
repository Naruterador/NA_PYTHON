#-*- coding:utf-8 -*-





'''
使用fork创建新进程
Python的os模块提供了一个fork()方法，该方法可以fork出来一个子进程。简单来说
fork()方法的作用在于:程序会启动两个进程:
一个父进程
一个fork出来的子进程
来执行从os.fork()开始的所有代码。fork方法不需要参数，它有一个返回值，该返回值表明
是哪个进程在执行。
  > 如果fork方法返回0，则表明是fork出来的子进程在执行。
  > 如果fork方法返回非0，则表明是父进程在执行，该方法返回fork()出来的子进程的进程ID。
'''




#下面程序示范了使用fork()方法创建新进程的过程

import os 
print('父进程(%s) 开执行' % os.getpid())
#开始fork一个子进程

#从这行代码开始，下面的代码都会被两个进程执行
pid = os.fork()
print('进程进入:%s' % os.getpid())
#如果pid为0，则表明是子进程
if pid == 0:
	print('子进程，其ID为(%s),父进程ID为(%s)' % (os.getpid(), os.getpid()))
else:
	print('我 (%s) 创建的子进程ID为(%s).' % (os.getpid(),os.getpid()))

print('进程结束:%s' % os.getpid())



'''
上面程序中pid = os.fork()代码表示fork出来一个子进程
这意味着程序会分别使用父进程和子进程来执行
pid = os.fork()语句开始的代码

在Linux和Mac OS X系统上可以运行上面程序(Windows 不支持fork()方法)
因此在Windows系统上运行
上面程序会报错)，程序输出结果如下:

父进程(10000) 开执行
进程进入:10000
我 (10000) 创建的子进程ID为(10000).
进程结束:10000

进程进入:10001
子进程，其ID为(10001),父进程ID为(10001)
进程结束:10001


从上面的运行结果可以看到，此时程序分别使用两个进程执行从"进程进入"到"进程结束"之间的代码
这就是os.fork()方法的作用。

在实际编程中，程序可通过fork()方法来创建一个子进程，然后通过判断fork()方法的返回值来确定
程序是否正在执行子进程，也就是把需要并发执行的任务放在if pid == 0:的条件执行体中，这样就
可以启动多个子进程来执行并发任务。




***os.fork()方法在Windows系统上无效，只在UNIX及UNIX系统上有效，UNIX及类UNIX系统包括
   UNIX、LINUX和Mac OS X。
'''