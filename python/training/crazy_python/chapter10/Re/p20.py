#coding = utf - 8 



import re
'''
在前面例子中需要建立一个匹配000-000-0000形式的电话号码时，使用r'\d\d\d-\d\d\d-\d\d\d\d'
正则表达式，这看起来比较繁琐。实际上，正则表达式还提供了额度限定，用于限定前面的模式可以出现的次数
。Python正则表达式支持如下几种额度限定。



*:限定前面的子表达式可出现0~N次。例如正则表达式r'zo*'能匹配'z',也能匹配'zoo'、'zooo'等。*等价于{0,}


+:限定前面的子表达式可以出现1~N次。例如正则表达式r'zo+'不能匹配'z',可以匹配'zo'、'zoo'、'zooo'等。+等价于{1,}


?:限定前面的子表达式出现0~1次。例如正则表达式r'zo?'能匹配'z'和'zo'两个字符串。?等价于{0,1}


{n,m}:n和m均为非负整数，其中n<=m,限定前面的子表达式出现n~m次。例如正则表达式r'fo{1,3}d'可匹配'fod'、'food'
'foood'这三个字符串。

{n,}:n是一个非负整数，限定前面的子表达式至少出现n次。例如正则表达式r'fo{2,}d'可匹配'food'、'foood'、'fooood'等字符串

{,m}:是一个非负整数，限定前面的子表达式至多出现m次。例如正则表达式r'fo{,3}d'可匹配'fd'、'fod'、'food'、'fooood'等

{n}:n是一个非负整数，限定前面的子表达式必须出现n次。例如正则表达式r'fo{2}d'只能匹配'food'字符串


在掌握了上面的写法之后，如果再需要书写匹配如000-000-0000形式的电话号码，则可以写成r'\d{3}-\d{3}-\d{4}'。

=====================================================================================================
'''


'''
在默认情况下，正则表达式频度限定是贪婪模式的。所谓贪婪模式，指的是表达式中的模式会尽可能多的匹配字符。
例如如下代码:
'''
print(re.search(r'@.+\.','sun@fkit.com.cn'))
#输出:<_sre.SRE_Match object; span=(3, 13), match='@fkit.com.'>

'''
上面正则表达式是r'@.+\.',该表达式就是匹配@符号和点号之间的全部内容。但由于在@和点号之间是".+",其中"."可代表
任意字符，而且此时匹配的结果是贪婪模式，因此".+"会尽可能多的进行匹配，只要它最后一个"."结尾即可，所以匹配的结果是'@fkit.com'

只要在频度限定之后添加一个英文问好，贪婪模式就变成了勉强模式，所谓勉强模式，指的是表达式中的模式会尽可能少地匹配字符。
'''
print(re.search(r'@.+?\.','sun@fkit.com.cn'))
#输出:<_sre.SRE_Match object; span=(3, 9), match='@fkit.'>

'''
上面的正则表达式与前一个示例中的正则表达式基本相似，只是中间部分是".+?",这是勉强模式。该模式会尽可能少地匹配字符，只要它
最后有一个"."结尾即可，因此匹配的结果是'@fkit.'
'''
