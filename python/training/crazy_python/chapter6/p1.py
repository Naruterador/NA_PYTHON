#coding=utf-8
'''
装饰器的工作原理：
当程序使用“@函数”（比如函数A）装饰另外一个函数（比如函数B）时，实际上完成如下两步
1.将被修饰的函数（函数B）作为参数传给@符号应用的函数（函数A）
2.将函数B替换（装饰）成第一步的返回值

综上所述，被“@函数”修饰的函数不再是原来的函数，而是被替换成一个新的东西
'''

def funA(fn):
    print('A')
    fn()
    return 'fkit'

'''
下面的装饰效果相当于funA(funB)
funB将会被替换(装饰)成该语句的返回值
由于funA函数返回fkit,因此funB就是fkit
'''


@funA
def funB():
    print('B')

print(funB)

'''
输出结果为:
A
B
Fkit
上面程序使用@funA装饰funB,这意味着程序要完成两步操作
1.将funB作为funA的参数，也就是相当与执行funA(funB)
2.将funB替换成第一步执行的结果，funA()执行完成后返回fkit,因此这里funB就不再是函数了，而是被替换成一个字符串。

被修饰函数总是被替换成@符号所引用的函数的返回值，因此被修饰的函数会变成什么，完全由于@符号所引用的函数的返回值决定————如果@符号所引用的函数的返回值是函数
那么被修饰的函数在替换之后还是函数
'''