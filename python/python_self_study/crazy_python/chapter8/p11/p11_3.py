#coding = utf - 8 

'''
此外，程序可以使用list()函数，将生成器能生成的所有值，转换为列表，也可以使用tuple()函数将生成器能生成
的所有值转换成元组。
'''


def test(val,step):
	print("------函数开始执行--------")
	cur = 0
	#遍历0~val
	for i in range(val):
		#cur添加 i*step
		cur = cur + i * step
 
		#print(cur,end=" 
		yield cur


#再次创建生成器
t = test(10,1)
#将生成器转换为列表
print(list(t))
#再次创建生成器
t = test(10,3)
#将生成器转换成元组
print(tuple(t))

'''
执行上面程序输出结果为:
------函数开始执行--------
[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
------函数开始执行--------
(0, 3, 9, 18, 30, 45, 63, 84, 108, 135)
'''

'''
python主要提供了两种方式来创建生成器
1.使用for循环的生成器推导式
2.调用带yield语句的生成器函数

生成器的优势:
1.当使用生成器来生成多个数据时，程序是按需获取数据的，他不会开始就把数据生成出来，而是每次
  调用next()获取下一个数据时，生成器才会执行一次，因此可以减少代码的执行次数。
2.当函数需要返回多个数据时，如果不使用生成器，程序就需要使用列表或者元组来收函数的返回值
  当函数返回的数据量巨大时，这些列表或者元组会带来内存开销，如果使用生成器，就不会存在这些
  问题
3.使用生成器的代码更加简洁
'''